services:
  # Frontend service
  frontend:
    image: ${FRONTEND_IMAGE}:${VERSION}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT_EXTERNAL}:5173"
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_TARGET=${VITE_TARGET}
    networks:
      - app-network

  # Backend service
  backend:
    image: ${BACKEND_IMAGE}:${VERSION}
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT_EXTERNAL}:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SWAGGER_HOST=${SWAGGER_HOST}
      - SWAGGER_PORT=${SWAGGER_PORT}
    volumes:
      - ./backend-api/public:/app/public
    depends_on:
      - mysql
      - redis
    networks:
      - app-network

  # MySQL database service
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    command: mysqld --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${MYSQL_PORT_EXTERNAL}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./backend-api/src/database/pizza.sql:/docker-entrypoint-initdb.d/pizza.sql:ro
    networks:
      - app-network

  # Redis service
  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT_EXTERNAL}:6379"
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
